#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <RTClib.h>

Adafruit_SSD1306 display = Adafruit_SSD1306(128, 64, &Wire);
RTC_DS1307 rtc;

const uint8_t message_icon21x21[] PROGMEM = {
  0x00, 0x7f, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x0f, 0xe3, 0xf8, 0x00, 0x3e, 0x00, 0x3e, 0x00, 
	0x78, 0x00, 0x0f, 0x00, 0x70, 0x00, 0x07, 0x00, 0xe0, 0x00, 0x03, 0x80, 0xe0, 0x00, 0x03, 0x80, 
	0xc0, 0x00, 0x01, 0x80, 0xc0, 0x00, 0x01, 0x80, 0xc0, 0x00, 0x01, 0x80, 0xe0, 0x00, 0x03, 0x80, 
	0xf0, 0x00, 0x07, 0x80, 0x78, 0x00, 0x0f, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x1e, 0x01, 0xfc, 0x00, 
	0x06, 0x1f, 0xf0, 0x00, 0x0e, 0x7f, 0x80, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 
	0x3c, 0x00, 0x00, 0x00
};

const uint8_t instagram_icon21x21[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x1e, 0x00, 0x3c, 0x00, 
	0x1c, 0x00, 0x7c, 0x00, 0x18, 0x3e, 0xec, 0x00, 0x18, 0xff, 0xcc, 0x00, 0x18, 0xff, 0x8c, 0x00, 
	0x19, 0xc1, 0xcc, 0x00, 0x19, 0xc1, 0xcc, 0x00, 0x19, 0xc1, 0xcc, 0x00, 0x19, 0xc1, 0xcc, 0x00, 
	0x19, 0xc1, 0xcc, 0x00, 0x18, 0xff, 0x8c, 0x00, 0x18, 0xff, 0x8c, 0x00, 0x18, 0x3e, 0x0c, 0x00, 
	0x1c, 0x00, 0x1c, 0x00, 0x1e, 0x00, 0x3c, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00
};

const uint8_t snapchat_icon21x21[] PROGMEM = {
	0x0f, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x3f, 0xe3, 0xfe, 0x00, 
	0x3f, 0xc1, 0xfe, 0x00, 0x3f, 0x80, 0xfe, 0x00, 0x3f, 0x80, 0xfe, 0x00, 0x3f, 0x80, 0xfe, 0x00, 
	0x3e, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x1e, 0x00, 0x3f, 0x00, 0x7e, 0x00, 0x3f, 0x00, 0x7e, 0x00, 
	0x3f, 0x00, 0x7e, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x1e, 0x00, 0x3e, 0x00, 0x3e, 0x00, 
	0x3f, 0x00, 0x7e, 0x00, 0x3f, 0xe3, 0xfe, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x1f, 0xff, 0xfc, 0x00, 
	0x0f, 0xff, 0xf8, 0x00
};

const uint8_t whatsapp_icon21x21[] PROGMEM = {
	0x00, 0xff, 0x80, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x0f, 0x80, 0xf8, 0x00, 
	0x1f, 0x00, 0x7c, 0x00, 0x1e, 0xc0, 0x3c, 0x00, 0x3d, 0xe0, 0x1e, 0x00, 0x39, 0xe0, 0x0e, 0x00, 
	0x39, 0xe0, 0x0e, 0x00, 0x39, 0xe0, 0x0e, 0x00, 0x39, 0xe0, 0x0e, 0x00, 0x38, 0xf1, 0x0e, 0x00, 
	0x38, 0x7f, 0xce, 0x00, 0x38, 0x3f, 0xce, 0x00, 0x3c, 0x1f, 0xde, 0x00, 0x1c, 0x07, 0xbc, 0x00, 
	0x1c, 0x00, 0x7c, 0x00, 0x1f, 0x80, 0xf8, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x3f, 0xff, 0xe0, 0x00, 
	0x3c, 0xff, 0x80, 0x00
};

const uint8_t gmail_icon21x21[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x80, 0xfc, 0x00, 0x1f, 0x80, 
	0xfe, 0x00, 0x3f, 0x80, 0xff, 0x00, 0x7f, 0x80, 0xff, 0xc1, 0xff, 0x80, 0xf7, 0xe3, 0xf7, 0x80, 
	0xf3, 0xff, 0xe7, 0x80, 0xf1, 0xff, 0xc7, 0x80, 0xf0, 0x7f, 0x07, 0x80, 0xf0, 0x3e, 0x07, 0x80, 
	0xf0, 0x08, 0x07, 0x80, 0xf0, 0x00, 0x07, 0x80, 0xf0, 0x00, 0x07, 0x80, 0xf0, 0x00, 0x07, 0x80, 
	0xf0, 0x00, 0x07, 0x80, 0xf0, 0x00, 0x07, 0x80, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 0x00, 
	0x00, 0x00, 0x00, 0x00
};

const uint8_t tiktok_icon21x21[] PROGMEM = {
	0x07, 0xff, 0xf0, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x38, 0x00, 0x0e, 0x00, 
	0x38, 0x07, 0x0e, 0x00, 0x38, 0x07, 0x0e, 0x00, 0x38, 0x07, 0xce, 0x00, 0x38, 0x07, 0xce, 0x00, 
	0x38, 0x07, 0xce, 0x00, 0x38, 0x37, 0x0e, 0x00, 0x38, 0x77, 0x0e, 0x00, 0x38, 0xf7, 0x0e, 0x00, 
	0x38, 0xe7, 0x0e, 0x00, 0x38, 0xc7, 0x0e, 0x00, 0x38, 0xee, 0x0e, 0x00, 0x38, 0xfe, 0x0e, 0x00, 
	0x38, 0x7c, 0x0e, 0x00, 0x38, 0x00, 0x0e, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xfc, 0x00, 
	0x07, 0xff, 0xf0, 0x00
};

const uint8_t twitter_icon21x21[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe2, 0x00, 0x18, 0x07, 0xfe, 0x00, 
	0x1c, 0x0f, 0xfe, 0x00, 0x3e, 0x0f, 0xfe, 0x00, 0x1f, 0x8f, 0xfc, 0x00, 0x1f, 0xff, 0xf8, 0x00, 
	0x3f, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xf8, 0x00, 
	0x0f, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x03, 0xff, 0xc0, 0x00, 
	0x03, 0xff, 0x80, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00
};

const uint8_t youtube_icon21x21[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 
	0x1f, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xfe, 0x00, 
	0x3f, 0xff, 0xfe, 0x00, 0x3f, 0xe7, 0xfe, 0x00, 0x3f, 0xe1, 0xfe, 0x00, 0x3f, 0xe7, 0xfe, 0x00, 
	0x3f, 0xef, 0xfe, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xfe, 0x00, 
	0x1f, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00
};

const uint8_t phone_icon21x21[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 
	0x1f, 0xc0, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 
	0x0f, 0x80, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 
	0x03, 0xc0, 0x00, 0x00, 0x03, 0xe1, 0xe0, 0x00, 0x01, 0xf3, 0xfc, 0x00, 0x00, 0xff, 0xfc, 0x00, 
	0x00, 0x7f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x01, 0xfc, 0x00, 
	0x00, 0x00, 0x00, 0x00
};


const uint8_t* icons[] = {
  message_icon21x21,
  instagram_icon21x21,
  snapchat_icon21x21,
  whatsapp_icon21x21,
  gmail_icon21x21,
  tiktok_icon21x21,
  twitter_icon21x21,
  youtube_icon21x21,
  phone_icon21x21
};

// Total number of icons
const int numIcons = sizeof(icons) / sizeof(icons[0]);

// Index of the current icon
int currentIconIndex = 0;

int track = 0;



void setup() {
    Wire.begin();
    display.begin(SSD1306_SWITCHCAPVCC, 0x3C);

    if (! rtc.begin()) {
        display.println("Couldn't find RTC");
        while (1);
    }

    if (! rtc.isrunning()) {
        rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    }

    display.display();
    delay(2000);
    display.clearDisplay();
}

void loop() {
    if(track%5==0 && track!=0){
  display.clearDisplay();

  // Set text size
  int textSize = 3;
  display.setTextSize(textSize);
  display.setTextColor(WHITE);

  DateTime now = rtc.now();

  // Get the current hour, minute, and second
  int currentHour = now.hour();
  int currentMinute = now.minute();

  // Convert to 12-hour time
  if (currentHour > 12) {
    currentHour -= 12;
  } else if (currentHour == 0) {
    currentHour = 12;
  }

  // Format hour
  String hourStr = "";
  if (currentHour < 10) {
    hourStr += '0';
  }
  hourStr += String(currentHour);

  // Format minute
  String minuteStr = "";
  if (currentMinute < 10) {
    minuteStr += '0';
  }
  minuteStr += String(currentMinute);

  int charWidth = 6 * textSize;
  int charHeight = 8 * textSize;
  int iconWidth = 25;
  int iconHeight = 21;
  int colonWidth = 2 * textSize;
  int spacing = 6;
  int totalWidth = (hourStr.length() + minuteStr.length()) * charWidth + iconWidth + colonWidth + spacing;
  int x = (display.width() - totalWidth) / 2;
  int y = (display.height() - max(charHeight, iconHeight)) / 2;

  // Set cursor and print the hour
  display.setCursor(x, y);
  display.print(hourStr);

  x += hourStr.length() * charWidth - 5;

  // Print the colon
  display.setCursor(x, y);
  display.print(':');

  x += colonWidth + 8;

  // Print the minute
  display.setCursor(x, y);
  display.print(minuteStr);

  x += minuteStr.length() * charWidth + spacing ;

  // Draw the current icon
  display.drawBitmap(x, y, icons[currentIconIndex], iconWidth, iconHeight, WHITE);

  // Increment the icon index
  currentIconIndex = (currentIconIndex + 1) % numIcons;
    track = track +1;
  display.display();
  delay(5000); // Delay for 5 seconds
    }
    else{
        display.clearDisplay();

  // Set text size
  int textSize = 3;
  display.setTextSize(textSize);
  display.setTextColor(WHITE);

  DateTime now = rtc.now();

  // Get the current hour, minute, and second
  int currentHour = now.hour();
  int currentMinute = now.minute();

  // Convert to 12-hour time
  if (currentHour > 12) {
    currentHour -= 12;
  } else if (currentHour == 0) {
    currentHour = 12;
  }

  // Format hour
  String hourStr = "";
  if (currentHour < 10) {
    hourStr += '0';
  }
  hourStr += String(currentHour);

  // Format minute
  String minuteStr = "";
  if (currentMinute < 10) {
    minuteStr += '0';
  }
  minuteStr += String(currentMinute);

  int charWidth = 6 * textSize;
  int charHeight = 8 * textSize;
 
  int colonWidth = 2 * textSize;
  int spacing = 6;
  int totalWidth = (hourStr.length() + minuteStr.length()) * charWidth +  colonWidth + spacing;
  int x = (display.width() - totalWidth) / 2;
  int y = (display.height() - charHeight) / 2;

  // Set cursor and print the hour
  display.setCursor(x, y);
  display.print(hourStr);

  x += hourStr.length() * charWidth -5;

  // Print the colon
  display.setCursor(x, y);
  display.print(':');

  x += colonWidth + 8;

  // Print the minute
  display.setCursor(x, y);
  display.print(minuteStr);

  x += minuteStr.length() * charWidth + spacing ;


    track = track +1;
  display.display();
  delay(1000); 
    }
}







